# file: cfg.projects
# bk_version 25.03.1
# included with 'source'

# Copyright (C) 2017-2025 Richard Albrecht
# www.rleofield.de

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#------------------------------------------------------------------------------


####### general part  #######

readonly bv_version="25.04.1"

# default old backup date: used, if no value in folder 'done' ist set
readonly max_last_date="2025-03-01T00:00"


# backup waits in this intervall, nothing ist done
# values  > 23 or < 01 didn't work
# first value must be smaller than the second
# separated with -
# no spaces allowed
# numbers must have 2 digits 
# individual waittimes for each project are set below
readonly bv_globalwaittimeinterval=09-10

####### general part  #######



####################################################################

####### host part #######

# list of all targetdisks, listed by label
readonly DISKLIST="bbackup"

# associative arrays for projects
# "a_properties"  - properties for disks
# "a_projects"    - projects per disk
# "a_interval"    - time interval per project
# "a_targetdisk"  - used. if label is changed 
# "a_waittime"    - waittime per project


# umount   = disk is mounted/unmounted by backup, for external USB
# noumount = disk stays at system, for internal SATA disks

declare -A a_properties
a_properties=()
a_properties['bbackup']="xumount"

# use snapshot_root direct, don't use disk label for snapshot_root
# in bk_loop.sh, in inner loop
#a_properties['huh12_pserver']="ignore_snapshot_root"
#a_properties['huh12_cube']="ignore_snapshot_root"
#a_properties['huh12_eserver']="ignore_snapshot_root"



# sub projects per disk
declare -A a_projects
a_projects=()
a_projects['bbackup']="testData" 

# backup interval in minutes per project
# syntax:
#   - days:hours:minutes
#   - hours:minutes
#   - minutes
declare -A a_interval
a_interval=()
a_interval['bbackup_testData']=03:00



#  'targetdisk()' is used, if label of backup-disk is changed
#  see text at file end for details
declare -A a_targetdisk
a_targetdisk=()
# key is new projectlabel
# value is old backup disk label
# example: a_targetdisk['bbackup']="dbackup"


# backup for this project waits in this interval, nothing ist done
# values  > 23 or < 1 didn't work
# first value must be smaller than the second
declare -A a_waittime
a_waittime=()
a_waittime['bbackup_testData']=09-10

####### host part #######


# 
#  'targetdisk()' is used, if label of backup-disk is changed
# targetdisk is the label the backup-disk and also mountpoint in '/mnt'
# disklabel is the new projectlabel


#   with 'targetdisk()' the history in folder with old label can be used
#     normally this is not used, but the array must be declared
#     and is empty by default 


# move backup target

# 1. nur ein Verzeichnis, ohne weitere Prüfungen
#   a_properties['huh12_pserver']="ignore_snapshot_root"
#   prüft nicht, ob 'snapshot_root' in rsnapshot 
#    auf der durch den Label der HD vorgegebenen HD ist
#   kann verwendet werden, um einen Backupfolder an anderer Stelle unterzubringen
#   alle Prüfungen der HD, Existenz bei USB, freier Platz usw.,  
#   werden mit der bisherigen HD ausgeführt
#   Vorsicht: die durch 'snapshot_root' angegebene  Disk wird 
#      nicht geprüft, 
#      nicht eingebunden 
#      und auch nicht ausgehängt


# 2. complete disk with all backup folders

#  setup
#  1. set a_targetdisk['kluks']="edisk"
#    targetdisk replaces the label of the harddisk from the configuration
#         with another disk
#    all checks of the HD, existence at USB, free space etc.,
#          are executed with the target disk,
#          also the check for 'snapshot_root', if "ignore_snapshot_root" is not set
#     log in folder 'interval_done' uses old label, not targetdisk
#     log in folder 'done' uses old label, not targetdisk
#  2. set 'snapshot_root' in all 'conf/disk_label.conf' to targetdisk
#  3. copy all folder in backup from disk with label to targetdisk
#  test
#  start backup

#     function targetdisk {
#           returns targetdisk 

#  reverse
#  0. stop backup
#  1. remove a_targetdisk['kluks']="edisk"
#  2. adapt 'snapshot_root' in 'conf/disk_label.conf' 
#  3. copy all in backup from targetdisk to disk with label
#  test
#  start backup





# EOF

